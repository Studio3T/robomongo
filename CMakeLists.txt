CMAKE_MINIMUM_REQUIRED(VERSION 2.8.0)
#CMAKE_POLICY(SET CMP0020 NEW)
#################### Project Settings ####################
SET(PROJECT_NAME "Robomongo" CACHE STRING "Project Name")
SET(PROJECT_DOMAIN "www.robomongo.org" CACHE STRING "Internet domain name for ${PROJECT_NAME}")
SET(PROJECT_COMPANYNAME "Paralect")
SET(PROJECT_COPYRIGHT "Copyright (C) 2013 ${PROJECT_COMPANYNAME} All Rights Reserved.")
SET(PROJECT_COMPANYNAME_DOMAIN "www.paralect.com")
SET(PROJECT_GITHUB_FORK "www.github.com/paralect/robomongo")
SET(PROJECT_GITHUB_ISSUES "www.github.com/paralect/robomongo/issues")
##########################################################
STRING(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWERCASE)
SET(MAJOR "0")
SET(MINOR "7")
SET(PATCH "2")
SET(BUILD " beta 1")
SET(SHORT_VERSION ${MAJOR}.${MINOR}.${PATCH})
SET(PROJECT_NAME_VERSION "${SHORT_VERSION}${BUILD}" CACHE STRING "${PROJECT_NAME} version")
IF(UNIX AND NOT APPLE)
    SET(PROJECT_NAME ${PROJECT_NAME_LOWERCASE})
ENDIF()
#############################################################
# Configure project
PROJECT(${PROJECT_NAME})
########################## Options #########################
OPTION(GENERATE_TRANSLATIONS "Generate ts-files for ${PROJECT_NAME}" OFF)
IF(WIN32)
	OPTION(MANIFEST_ENABLE "Enable Manifest" ON)
ENDIF(WIN32)
OPTION(BOOST_ENABLED "Enable boost system support" OFF)
OPTION(BUILD_PCRECPP_LIBRARY "Build pcrecpp library from sources" ON)
OPTION(QT_ENABLED "Enable Qt support" ON)
OPTION(CPACK_SUPPORT "Enable package support" ON)
OPTION(UNICODE_ENABLE "Support unicode" OFF)
OPTION(DEVELOPER_DYNAMIC_RUNTIME "Build with dynamic C++ runtime" ON)
OPTION(DEVELOPER_FEATURES "Use some debug tricks for developers" OFF)
IF(MSVC)
    IF(CMAKE_CL_64)
        OPTION(BUILD_64X "Build 64bit project" ON)
    ELSE()
        OPTION(BUILD_64X "Build 64bit project" OFF)
    ENDIF()
ELSE()
    IF("${OS_ARC}" STREQUAL "64")
        OPTION(BUILD_64X "Build 64bit project" ON)
    ELSEIF("${OS_ARC}" STREQUAL "32")
        OPTION(BUILD_64X "Build 64bit project" OFF)
    ELSE()
        IF(CMAKE_SIZEOF_VOID_P MATCHES 8) 
            OPTION(BUILD_64X "Build 64bit project" ON)
        ELSE(CMAKE_SIZEOF_VOID_P MATCHES 8) 
            OPTION(BUILD_64X "Build 64bit project" OFF)
        ENDIF(CMAKE_SIZEOF_VOID_P MATCHES 8)
    ENDIF()
ENDIF()
INCLUDE(cmake/config.cmake)

DEFINE_DEFAULT_DEFINITIONS()

# Search libraries
# use Qt
DETECT_QT()
##################### Libraries search ###################
IF(DEVELOPER_QT5)
    SET(QT_COMPONENTS_TO_USE Qt5Core Qt5Gui Qt5Widgets)
IF(UNIX AND NOT APPLE)
    SET(QT_COMPONENTS_TO_USE ${QT_COMPONENTS_TO_USE} Qt5DBus) #for libqxcb
ENDIF(UNIX AND NOT APPLE)
ELSE()
    SET(QT_COMPONENTS_TO_USE QtCore QtGui)
ENDIF()
INTEGRATE_QT(${QT_COMPONENTS_TO_USE})
##########################################################

## Qt static or dinamic detector ##

# enable GIF and ICO support
IF(WIN32)
    FIND_LIBRARY(QT_ICO_PLUGIN qico PATHS ${QT_PLUGINS_DIR} PATH_SUFFIXES imageformats)
    FIND_LIBRARY(QT_ICO_PLUGIN_DEBUG qicod PATHS ${QT_PLUGINS_DIR} PATH_SUFFIXES imageformats)
ELSEIF(APPLE)
    FIND_LIBRARY(QT_ICO_PLUGIN qico PATHS ${QT_PLUGINS_DIR} PATH_SUFFIXES imageformats)
    FIND_LIBRARY(QT_ICO_PLUGIN_DEBUG qico_debug PATHS ${QT_PLUGINS_DIR} PATH_SUFFIXES imageformats)
ENDIF()

IF(CMAKE_COMPILER_IS_GNUCXX)
    IF (NOT CMAKE_BUILD_TYPE)
        SET(CMAKE_BUILD_TYPE DEBUG)
    ENDIF()
    IF(NOT MINGW)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
    ENDIF()
ENDIF()
IF(BUILD_64X)
    IF(CMAKE_COMPILER_IS_GNUCXX)
        SET(CFLAGS "${CFLAGS} -m64")
        SET(CXXFLAGS "${CXXFLAGS} -m64")
    ELSEIF(MSVC)
        SET(CMAKE_EXE_LINKER_FLAGS "/machine:x64")
    ENDIF()
    IF(APPLE)
        SET(CMAKE_OSX_ARCHITECTURES x86_64)
    ENDIF()
    SET(ARCH_TEXT 64)
    SET(ARCH_TEXT_PACKAGE x86_64)#amd64
ELSE()
    IF(CMAKE_COMPILER_IS_GNUCXX)
        SET(CFLAGS "${CFLAGS} -m32")
        SET(CXXFLAGS "${CXXFLAGS} -m32")
    ELSEIF(MSVC)
        SET(CMAKE_EXE_LINKER_FLAGS "/machine:x86")
    ENDIF()
    IF(APPLE)
        SET(CMAKE_OSX_ARCHITECTURES i386)
        #-DCMAKE_OSX_ARCHITECTURES= ;i386
    ENDIF()
    SET(ARCH_TEXT 32)
    SET(ARCH_TEXT_PACKAGE i386)
ENDIF()

##################################DEFAULT VALUES##########################################
IF(NOT CMAKE_INSTALL_PREFIX})
    SET(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install")
ENDIF()

IF("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")
    MESSAGE(SEND_ERROR "In-source builds are not allowed.")
ENDIF("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")

############################################################################
IF(WIN32)
    SET(RESOURCE_OS    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/win.rc")
    SET(RESOURCE_OS_IN "${CMAKE_SOURCE_DIR}/install/windows/winres.rc.in")
    SET(ICON_FILE      "${CMAKE_SOURCE_DIR}/src/robomongo/gui/resources/robo.ico")
    SET(LIB_INSTALL_DESTINATION .)
    SET(TARGET_INSTALL_DESTINATION .)
ELSEIF(APPLE)
    SET(RESOURCE_OS		"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/robomongo.desktop")
    SET(RESOURCE_OS_IN	"${CMAKE_SOURCE_DIR}/install/robomongo.desktop.in"	)
    SET(ICON_FILE		"${CMAKE_SOURCE_DIR}/install/osx/Robomongo.icns")
    SET(LIB_INSTALL_DESTINATION .)
    SET(TARGET_INSTALL_DESTINATION .)
    SET(CLIENT_DATA_DIR "${PROJECT_NAME}.app")
ELSEIF(UNIX)
    SET(RESOURCE_OS "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}.desktop")
    SET(RESOURCE_OS_IN "${CMAKE_SOURCE_DIR}/install/robomongo.desktop.in")
    SET(ICON_FILE      "${CMAKE_SOURCE_DIR}/install/linux/robomongo.png")
    SET(LIB_INSTALL_DESTINATION lib)
    SET(TARGET_INSTALL_DESTINATION bin)
ENDIF()
# project sources
ADD_SUBDIRECTORY(src)
IF(CPACK_SUPPORT)
    SET(CPACK_PACKAGE_DESCRIPTION ${PROJECT_NAME}" description")
    SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_NAME} project")#CPACK_DEBIAN_PACKAGE_DESCRIPTION CPACK_RPM_PACKAGE_SUMMARY
    SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.md")#CPACK_RPM_PACKAGE_DESCRIPTION
    
    SET(CPACK_PACKAGE_VENDOR ${PROJECT_COMPANYNAME})#CPACK_RPM_PACKAGE_VENDOR
    SET(CPACK_PACKAGE_CONTACT "Dmitry Schetnikovich <dima@paralect.com>")#CPACK_DEBIAN_PACKAGE_MAINTAINER
    SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
    SET(CPACK_RESOURCE_FILE_README ${CPACK_PACKAGE_DESCRIPTION_FILE})
    
    SET(CPACK_PACKAGE_VERSION_MAJOR ${MAJOR})
    SET(CPACK_PACKAGE_VERSION_MINOR ${MINOR})
    STRING(REGEX REPLACE " " "" BUILD_ESCAPE ${BUILD})
    SET(CPACK_PACKAGE_VERSION_PATCH ${SHORT_VERSION}-${BUILD_ESCAPE})

    SET(CPACK_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION_PATCH})#CPACK_DEBIAN_PACKAGE_VERSION CPACK_RPM_PACKAGE_VERSION
    SET(CPACK_PACKAGE_NAME ${PROJECT_NAME})#CPACK_DEBIAN_PACKAGE_NAME CPACK_RPM_PACKAGE_NAME
    SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${ARCH_TEXT_PACKAGE}")#out package name
    SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME} file name")  
    SET(CPACK_PACKAGE_INSTALL_DIRECTORY ${PROJECT_NAME})
    MESSAGE(STATUS "CPACK_PACKAGE_FILE_NAME: ${CPACK_PACKAGE_FILE_NAME}") 
    #SET(CPACK_COMPONENTS_ALL Libraries ApplicationData)
    IF(WIN32)
        # There is a bug in NSI that does not handle full unix paths properly. Make
        # sure there is at least one set of four (4) backlasshes.
        SET(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}/install/windows\\\\database-small.bmp")
        SET(CPACK_NSIS_INSTALLED_ICON_NAME "\\\\${PROJECT_NAME}.exe")
        SET(CPACK_NSIS_CREATE_ICONS "CreateShortCut \\\"$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\${PROJECT_NAME}.lnk\\\" \\\"$INSTDIR\\\\${PROJECT_NAME}.exe\\\"")

        SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY}")
        SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\${PROJECT_COMPANYNAME_DOMAIN}")
        SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\${PROJECT_DOMAIN}")
        SET(SIDEBAR_IMAGE ${CMAKE_SOURCE_DIR}/install/windows\\\\database.bmp)
        SET(CPACK_NSIS_INSTALLER_MUI_ICON_CODE "!define MUI_WELCOMEFINISHPAGE_BITMAP \\\"${SIDEBAR_IMAGE}\\\"")
        SET(CPACK_NSIS_CONTACT "me@my-personal-home-page.com")
        SET(CPACK_NSIS_MODIFY_PATH ON)
        SET(CPACK_NSIS_MUI_FINISHPAGE_RUN "..\\\\${PROJECT_NAME}.exe")
    ELSEIF(APPLE)
        SET(CPACK_GENERATOR DragNDrop)
        #SET(CPACK_OSX_PACKAGE_VERSION "10.5")
    ELSEIF(UNIX)
        SET(CPACK_PACKAGING_INSTALL_PREFIX "/opt/${PROJECT_NAME}")
        #SET(UBUNTU_LP_BUG 300472)
        #SET(CPACK_STRIP_FILES "bin/${PROJECT_NAME}")
        #SET(CPACK_SOURCE_STRIP_FILES "")
        IF(NOT CPACK_GENERATOR)
            SET(CPACK_GENERATOR "DEB")
        ENDIF()	
        CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/install/linux/postinst.in" "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/postinst" @ONLY IMMEDIATE)
        CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/install/linux/prerm.in" "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/prerm" @ONLY IMMEDIATE)
        IF(CPACK_GENERATOR STREQUAL "RPM")
	        #CPACK_RPM_PACKAGE_ARCHITECTURE CPACK_RPM_PACKAGE_LICENSE CPACK_RPM_PACKAGE_DESCRIPTION CPACK_RPM_SPEC_INSTALL_POST
	        #SET(CPACK_PACKAGE_RELEASE 1)
            SET(CPACK_RPM_PACKAGE_LICENSE "GPL, BSD")
            SET(CPACK_RPM_PACKAGE_RELEASE 1)
            SET(CPACK_RPM_PACKAGE_GROUP "Development/Libraries/${PROJECT_COMPANYNAME}")
            SET(CPACK_RPM_PACKAGE_ARCHITECTURE ${ARCH_TEXT_PACKAGE})
            SET(CPACK_RPM_PACKAGE_VERSION ${SHORT_VERSION})
            SET(CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/postinst")
            SET(CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/prerm")
        ELSEIF(CPACK_GENERATOR STREQUAL "DEB")
            IF(ARCH_TEXT_PACKAGE STREQUAL x86_64)
                SET(ARCH_TEXT_PACKAGE amd64)
            ENDIF()
	        #SET(CPACK_DEBIAN_PACKAGE_DEPENDS "cssrobopec,libqt4-xml,libqt4-network,libqtgui4,treeupdatablereeti")
            SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
            SET(CPACK_DEBIAN_PACKAGE_SECTION "Databases")#input our section
            SET(CPACK_DEBIAN_PACKAGE_RECOMMENDS "Unknown")
            SET(CPACK_DEBIAN_PACKAGE_SUGGESTS "Unknown")
            SET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${ARCH_TEXT_PACKAGE})#i386
            SET(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/postinst;${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/prerm")
        ENDIF()
    ENDIF(WIN32)
    SET(CPACK_PACKAGE_EXECUTABLES ${PROJECT_NAME} ${PROJECT_NAME})
    INCLUDE(CPack)
ENDIF(CPACK_SUPPORT)
